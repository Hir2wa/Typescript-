 A.How do type guards work? Give examples using typeof, in and user-defined type guard functions.
------------------------------------------------------------------------------------------------
-A type guard is a way to narrow down the type of a variable inside a condition,
 so TypeScript knows exactly what you're working with.
Think of it as: ‚ÄúHey TypeScript, I just proved what this thing really is ‚Äî now let me use it properly.‚Äù

-2. Using in ‚Äî for object properties
Use this when you have different objects that share some props and differ in others.

type Admin = { role: "admin"; dashboard: string };
type User = { role: "user"; cart: string[] };

function handlePerson(person: Admin | User) {
  if ("dashboard" in person) {
    console.log("Welcome Admin:", person.dashboard);
  } else {
    console.log("User Cart:", person.cart);
  }
}

3.üßô 3. User-defined Type Guards ‚Äî your own üî• logic
You can write your own function that returns a special type:

type Dog = { bark(): void };
type Cat = { meow(): void };

function isDog(animal: Dog | Cat): animal is Dog {
  return "bark" in animal;
}

function makeSound(pet: Dog | Cat) {
  if (isDog(pet)) {
    pet.bark(); // TS knows it's a Dog ‚úÖ
  } else {
    pet.meow(); // TS knows it's a Cat ‚úÖ
  }
}




| Guard Type | Syntax/Keyword            | Use Case                                       |
| ---------- | ------------------------- | ---------------------------------------------- |
| `typeof`   | `typeof value === "type"` | Use with primitives (`string`, `number`, etc.) |
| `in`       | `"prop" in object`        | Use to check if a prop exists in an object     |
| **Custom** | `function x is Y()`       | Write your own logic for complex types         |

B.What are conditional types (e.g. T extends U ? X : Y)? Provide a real-world use case.
//used inside generics