 how to install typsript 
 //npm i typescript -g 
 //tsc "name of the file" better add -w to continue watching the  changes 
 //tsc --init //these create a configuration folder 
 //late after we need to config our project   through rootDir  and add the  src as the root 
//later again we need to find outerDir   inside ./build/js     these will create a js directory and its where all the compiled file for ts will be `
//later added noEmitOnError to true 
---------------------------------------------------
1. Itro to typscript 
1.1
a.typescript a static language that means  types are checked at compler time 
-help to catch error during the development  instead in running time 
-integration of intersence help us to get error and reading them 
-great for teams 

b.js is dynamic that measn types are checked on run time 
1.2
-in typescript you explicit set types where the typscript will not enferre the types it will already now it  because you set it 
1.3
types in typescript 
-numbers 
-string 
-boolean
-union |
-any   (any types )
2.Type aliases let you name a type once and reuse it anywhere.
-type alias help us to union different type to a valiable which don't work on interface 

type ID = number | string;       // can't do this with interface
type RGB = [number, number, number];
type Status = "success" | "error";
here  on unions  and tuples and literal types  here types wins 
//key take away on typescript 
------------------------------
ðŸ§± Both type and interface:
Help you shape the structure of:

Objects
Arrays
Function types
API responses
Classes (especially with interface)
And more!


- we have 2 types of assertion 
a.not null or underfined 
b.typscrip doesn't know type but you know more about the type 
c.making properties of object readonly making them constants  and become type of those propety names also 


readonly  works on interface classes and types to loop on properties 
these prevents the reassignment of the value either on classes ,interface or types
while the as const   lock the the entire properties of the array object
here all object  are narrowed literal to exact value 


| Utility        | What it does                                         |
| -------------- | ---------------------------------------------------- |
| `Record<K, T>` | Makes an object with keys `K` and values of type `T` |
| `Partial<T>`   | Makes all properties in T optional                   |
| `Pick<T, K>`   | Picks specific keys from type T                      |
| `Omit<T, K>`   | Opposite of Pick â€” removes keys                      |
| `Readonly<T>`  | Makes all props read-only                            |


âœ… Yes â€” most utility types in TypeScript are designed to work on object
 types (a.k.a. type shapes, interfaces, or object literals).
ðŸ“¦ Think of utility types like power tools for shaping and modifying object types.

So YES â€” You're 100% right:
Utility types are mostly for shaping object types

They help you restructure, pick, exclude, or transform types

They make your code cleaner, safer, and more scalable

